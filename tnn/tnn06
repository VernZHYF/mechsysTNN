/************************************************************************
 * MechSys - Open Library for Mechanical Systems                        *
 * Copyright (C) 2009 Sergio Galindo                                    *
 *                                                                      *
 * This program is free software: you can redistribute it and/or modify *
 * it under the terms of the GNU General Public License as published by *
 * the Free Software Foundation, either version 3 of the License, or    *
 * any later version.                                                   *
 *                                                                      *
 * This program is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *
 * GNU General Public License for more details.                         *
 *                                                                      *
 * You should have received a copy of the GNU General Public License    *
 * along with this program. If not, see <http://www.gnu.org/licenses/>  *
 ************************************************************************/

/////////////////////// Test 01 fitting quadratic polynomial

//multivariable regression

// MechSys
#include <mechsys/nn/Domain.h>
#define PI 3.1415926

int main(int argc, char **argv) try
{
    size_t Nproc = 1;
    if (argc>1) Nproc = atoi(argv[1]);

    size_t ni = 4;  //Number of inputs
    size_t no = 1;  //Number of outputs
    size_t nh = 1;  //Number of hidden layers
    size_t nn = 500;//Number of neurons per hidden layer
    size_t nt = 150; //Number of training sets

    //Preparing input and output data for training sets
    Array<Array <double> > In;
    Array<Array <double> > Out;
    In .Resize(nt);    
    Out.Resize(nt);
        
    //Initialization of the training data: 150 sets
    double data1[204];
    double data2[204];
    double data3[204];
    double data4[204];
    double data5[204];

    hid_t file_id;
    file_id = H5Fopen("trainingData.h5", H5F_ACC_RDONLY,H5P_DEFAULT);
    H5LTread_dataset_double(file_id, "YoungPhysical", data1);
    H5LTread_dataset_double(file_id, "PoissonPhysical", data2);
    H5LTread_dataset_double(file_id, "CPhysical", data3);
    H5LTread_dataset_double(file_id, "PhiPhysical", data4);
    H5LTread_dataset_double(file_id, "Angle", data5);    

    for (size_t i = 0; i < nt; i++)
    {
        In [i].Resize(ni);
        Out[i].Resize(no);

        In [i][0] = data1[i];
        In [i][1] = data2[i];        
        In [i][2] = data3[i];        
        In [i][3] = data4[i];
        
        Out[i][0] = data5[i]; 
             
    }    

    
    NN::Domain dom(In,Out,nh,nn);
    dom.Initialize();
    dom.Alpha = 0.1; //learning rate
    dom.Type  = 4; //choose the activation function 
    //dom.Train(40000/*epochs*/,Nproc/*number of cores*/);

    //modification1
    dom.Train(40000/*epochs*/,Nproc/*number of cores*/);
    
    //Test the trained NN

    // //The caculation of error
    // std::cout<< "---------- The results ----------"<<std::endl;
    // std::cout<< "---------------------------------"<<std::endl;
    // for (size_t i = nt; i < 200; i++)
    // {
        
    //     In [i][0] = data1[i];
    //     std::cout<<In [i][0]<<std::endl;
    //     In [i][1] = data2[i];
    //     std::cout<<In [i][1]<<std::endl;
    //     In [i][2] = data3[i];
    //     std::cout<<In [i][2]<<std::endl;
    //     In [i][3] = data4[i];
    //     std::cout<<In [i][3]<<std::endl;
    //     std::cout<<"........."<<std::endl;
    //     Out[i][0] = data5[i]; 
    //     std::cout<<Out[i][0]<<std::endl;        

    //     dom.Predict(In[i],Out[i],1);       
    
    //     // std::cout<<"The simulation result: " << data5[i] << " | " <<std::cout<< "The prediction result: " <<Out[i][0]<<std::endl;
    // }

    In [0][0] = data1[150];
    In [0][1] = data2[150];
    In [0][2] = data3[150];
    In [0][3] = data4[150];
    
    Out[0][0] = data5[150]; 
           

    dom.Predict(In[0],Out[0],1);       
    
    std::cout<<"The simulation result: " << data5[150] << " | " << "The prediction result: " <<Out[0][0]<<std::endl;
    
    

    
    
  

    //Saving the NN
    dom.Save("tnn05");
    return 0;

}
MECHSYS_CATCH

